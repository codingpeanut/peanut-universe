


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AIRCRTest, CODE, READONLY
    2 00000000 400000C8 
                       AIRCR   EQU              0x400000C8
    3 00000000 40000020 
                       RAMSTART
                               EQU              0x40000020
    4 00000000         
    5 00000000         start
    6 00000000 E59FD0D8        LDR              sp, =RAMSTART
    7 00000004 E59F00D8        LDR              r0, =AIRCR
    8 00000008         
    9 00000008         ; (Step 1) set AIRCR = 0b 1111 1111 (address of AIRCR = 
                       0x400000C8)
   10 00000008 E3A020FF        MOV              r2, #0xFF   ; r2 = 0b 1111 1111
                                                            
   11 0000000C E5C02000        STRB             r2, [r0]
   12 00000010         
   13 00000010         ; (Step 2) read AIRCR, assume AIRCR width = 6, r2 = 0b 1
                       111 1100 (only 6 bit set successfully)-> simulation
   14 00000010 E5D02000        LDRB             r2, [r0]
   15 00000014 E3A020FC        MOV              r2, #0xFC   ; r2 = 0b 1111 1100
                                                             (assume AIRCR widt
                                                            h = 6)
   16 00000018 E3A01000        MOV              r1, #0      ; r1 = width_counte
                                                            r
   17 0000001C         
   18 0000001C EB000003        BL               with_test_pattern_LSR
   19 00000020 EB00000C        BL               with_test_pattern_LSL
   20 00000024 EB000017        BL               without_test_pattern_LSR
   21 00000028 EB000022        BL               without_test_pattern_LSL
   22 0000002C         
   23 0000002C EAFFFFFE 
                       stop    B                stop
   24 00000030         
   25 00000030         ; 411440521 JoshLee 
   26 00000030         ; Supplement of TST -> logic AND
   27 00000030         ; if result == 0 -> Z flag = 1 -> EQ
   28 00000030         ; if result != 0 -> Z flag = 0 -> NE
   29 00000030         
   30 00000030         ; (a) using LSR with test pattern LSR
   31 00000030         ; silde r3 (test pattern) to check r2 (AIRCR), focus on 
                       1
   32 00000030         ; r1 = width_counter
   33 00000030         ; r2 = AIRCR  = 0b 1111 1100 ->     -> 0b 1111 1100
   34 00000030         ; r3 = test pattern = 0b 1000 0000 -> LSR -> 0b 0100 000
                       0 ...
   35 00000030         with_test_pattern_LSR
   36 00000030 E92D400E        STMFD            sp!, {r1-r3, lr}
   37 00000034 E3A03080        MOV              r3, #0x80   ; r3 = 0b 1000 0000
                                                             (test pattern_a)
   38 00000038         TEST1
   39 00000038 E3510008        CMP              r1, #8      ; if reach max_widt
                                                            h?
   40 0000003C 0A000004        BEQ              OUT1        ; yes -> test finis
                                                            h ->> width = max_w
                                                            idth
   41 00000040 E1120003        TST              r2, r3      ; test pattern & AI
                                                            RCR == 0?
   42 00000044 0A000002        BEQ              OUT1        ; EQ (result is 0 b



ARM Macro Assembler    Page 2 


                                                            efore reach max_wid
                                                            th) ->> width = wid
                                                            th_counter
   43 00000048 E2811001        ADD              r1, r1, #1  ; width_counter++
   44 0000004C E1A030A3        LSR              r3, r3, #1  ; right slide test 
                                                            pattern
   45 00000050 EAFFFFF8        B                TEST1
   46 00000054         OUT1
   47 00000054 E8BD800E        LDMFD            sp!, {r1-r3, pc}
   48 00000058         
   49 00000058         ; 411440521 JoshLee
   50 00000058         ; (b) using LSL with test pattern LSL
   51 00000058         ; silde r3 (test pattern) to check r2 (AIRCR), focus on 
                       0
   52 00000058         ; r1 = width_counter
   53 00000058         ; r2 = AIRCR  = 0b 1111 1100 ->     -> 0b 1111 1100
   54 00000058         ; r3 = test pattern = 0b 1000 0000 -> LSL -> 0b 0000 000
                       1 ...
   55 00000058         with_test_pattern_LSL
   56 00000058 E92D401E        STMFD            sp!, {r1-r4, lr}
   57 0000005C E3A03001        MOV              r3, #0x1    ; r3 = 0b 0000 0001
                                                             (test_pattern_b)
   58 00000060         TEST2
   59 00000060 E3510008        CMP              r1, #8      ; if reach max_widt
                                                            h?
   60 00000064 0A000004        BEQ              OUT2        ; yes -> test finis
                                                            h ->> width = max_w
                                                            idth
   61 00000068 E1120003        TST              r2, r3      ; test pattern & AI
                                                            RCR != 0?
   62 0000006C 1A000002        BNE              OUT2        ; NE (result is not
                                                             0 before reach max
                                                            _width) ->> width =
                                                             width_counter
   63 00000070 E2811001        ADD              r1, r1, #1  ; width_counter_inv
                                                            erse++
   64 00000074 E1A03083        LSL              r3, r3, #1  ; left slide test p
                                                            attern
   65 00000078 EAFFFFF8        B                TEST2
   66 0000007C         OUT2
   67 0000007C E3A04008        MOV              r4, #0x8
   68 00000080 E0444001        SUB              r4, r1      ; width = max_width
                                                             - width_counter_in
                                                            verse
   69 00000084 E8BD801E        LDMFD            sp!, {r1-r4, pc}
   70 00000088         
   71 00000088         ; 411440521 JoshLee
   72 00000088         ; (c) using LSR without test pattern LSR
   73 00000088         ; check r3 (test pattern) by silding r2 (AIRCR)
   74 00000088         ; r1 = width_counter
   75 00000088         ; r2 = AIRCR  = 0b 1111 1100
   76 00000088         ; r3 = test pattern = 0b 1000 0000
   77 00000088         without_test_pattern_LSR
   78 00000088 E92D401E        STMFD            sp!, {r1-r4, lr}
   79 0000008C E3A03001        MOV              r3, #0x1    ; r3 = 0b 0000 0001
                                                             (test_pattern_c)
   80 00000090         TEST3
   81 00000090 E3510008        CMP              r1, #8      ; if reach max_widt
                                                            h?



ARM Macro Assembler    Page 3 


   82 00000094 0A000004        BEQ              OUT3        ; yes -> test finis
                                                            h ->> width = max_w
                                                            idth
   83 00000098 E1120003        TST              r2, r3      ; test pattern & AI
                                                            RCR != 0?
   84 0000009C 1A000002        BNE              OUT3        ; NE (result is not
                                                             0 before reach max
                                                            _width) ->> width =
                                                             width_counter
   85 000000A0 E2811001        ADD              r1, r1, #1  ; width_counter++
   86 000000A4 E1A020A2        LSR              r2, r2, #1  ; right slide test 
                                                            pattern
   87 000000A8 EAFFFFF8        B                TEST3
   88 000000AC         OUT3
   89 000000AC E3A04008        MOV              r4, #0x8
   90 000000B0 E0444001        SUB              r4, r1
   91 000000B4 E8BD801E        LDMFD            sp!, {r1-r4, pc}
   92 000000B8         
   93 000000B8         
   94 000000B8         ; (d) using LSL without test pattern LSL
   95 000000B8         ; check r3 (test pattern) by silding r2 (AIRCR)
   96 000000B8         ; r1 = width_counter
   97 000000B8         ; r2 = AIRCR  = 0b 1111 1100
   98 000000B8         ; r3 = test pattern = 0b 1000 0000
   99 000000B8         without_test_pattern_LSL
  100 000000B8 E92D400E        STMFD            sp!, {r1-r3, lr}
  101 000000BC E3A03080        MOV              r3, #0x80   ; r3 = 0b 1000 0000
                                                             (test pattern_d)
  102 000000C0         TEST4
  103 000000C0 E3510008        CMP              r1, #8      ; if reach max_widt
                                                            h?
  104 000000C4 0A000004        BEQ              OUT4        ; yes -> test finis
                                                            h ->> width = max_w
                                                            idth
  105 000000C8 E1120003        TST              r2, r3      ; test pattern & AI
                                                            RCR == 0?
  106 000000CC 0A000002        BEQ              OUT4        ; EQ (result is 0 b
                                                            efore reach max_wid
                                                            th) ->> width = wid
                                                            th_counter
  107 000000D0 E2811001        ADD              r1, r1, #1  ; width_counter++
  108 000000D4 E1A02082        LSL              r2, r2, #1  ; lsft slide test p
                                                            attern 
  109 000000D8 EAFFFFF8        B                TEST4
  110 000000DC         OUT4
  111 000000DC E8BD800E        LDMFD            sp!, {r1-r3, pc}
  112 000000E0         
  113 000000E0         
  114 000000E0                 END
              40000020 
              400000C8 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\prog4.d -o.\objects\prog4.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__UVISION_VERSION SETA 528" --list=.\listings\prog4.lst prog4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AIRCRTest 00000000

Symbol: AIRCRTest
   Definitions
      At line 1 in file prog4.s
   Uses
      None
Comment: AIRCRTest unused
OUT1 00000054

Symbol: OUT1
   Definitions
      At line 46 in file prog4.s
   Uses
      At line 40 in file prog4.s
      At line 42 in file prog4.s

OUT2 0000007C

Symbol: OUT2
   Definitions
      At line 66 in file prog4.s
   Uses
      At line 60 in file prog4.s
      At line 62 in file prog4.s

OUT3 000000AC

Symbol: OUT3
   Definitions
      At line 88 in file prog4.s
   Uses
      At line 82 in file prog4.s
      At line 84 in file prog4.s

OUT4 000000DC

Symbol: OUT4
   Definitions
      At line 110 in file prog4.s
   Uses
      At line 104 in file prog4.s
      At line 106 in file prog4.s

TEST1 00000038

Symbol: TEST1
   Definitions
      At line 38 in file prog4.s
   Uses
      At line 45 in file prog4.s
Comment: TEST1 used once
TEST2 00000060

Symbol: TEST2
   Definitions
      At line 58 in file prog4.s
   Uses
      At line 65 in file prog4.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: TEST2 used once
TEST3 00000090

Symbol: TEST3
   Definitions
      At line 80 in file prog4.s
   Uses
      At line 87 in file prog4.s
Comment: TEST3 used once
TEST4 000000C0

Symbol: TEST4
   Definitions
      At line 102 in file prog4.s
   Uses
      At line 109 in file prog4.s
Comment: TEST4 used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file prog4.s
   Uses
      None
Comment: start unused
stop 0000002C

Symbol: stop
   Definitions
      At line 23 in file prog4.s
   Uses
      At line 23 in file prog4.s
Comment: stop used once
with_test_pattern_LSL 00000058

Symbol: with_test_pattern_LSL
   Definitions
      At line 55 in file prog4.s
   Uses
      At line 19 in file prog4.s
Comment: with_test_pattern_LSL used once
with_test_pattern_LSR 00000030

Symbol: with_test_pattern_LSR
   Definitions
      At line 35 in file prog4.s
   Uses
      At line 18 in file prog4.s
Comment: with_test_pattern_LSR used once
without_test_pattern_LSL 000000B8

Symbol: without_test_pattern_LSL
   Definitions
      At line 99 in file prog4.s
   Uses
      At line 21 in file prog4.s
Comment: without_test_pattern_LSL used once
without_test_pattern_LSR 00000088




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: without_test_pattern_LSR
   Definitions
      At line 77 in file prog4.s
   Uses
      At line 20 in file prog4.s
Comment: without_test_pattern_LSR used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

AIRCR 400000C8

Symbol: AIRCR
   Definitions
      At line 2 in file prog4.s
   Uses
      At line 7 in file prog4.s
Comment: AIRCR used once
RAMSTART 40000020

Symbol: RAMSTART
   Definitions
      At line 3 in file prog4.s
   Uses
      At line 6 in file prog4.s
Comment: RAMSTART used once
2 symbols
351 symbols in table
