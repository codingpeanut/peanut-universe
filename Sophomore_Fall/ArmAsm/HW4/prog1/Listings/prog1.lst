


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             HW4, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         ;-------------------------------------------------------
                       ----------
    4 00000000         ; correct  8 bits = 0xB5   0b10110101
    5 00000000         ; correct 12 bits = BA6      0b101110100110
    6 00000000         ; wrong   c0      = BA7  0b101110100111
    7 00000000         ; wrong  c1  = BA4  0b101110100100
    8 00000000         ; wrong  c2  = BAE  0b101110101110
    9 00000000         ; wrong c3  = B26  0b101100100110
   10 00000000         ; wrong  c0 c2   = BB6  0b101110110110
   11 00000000         ; wrong c1 c3 = 9A6   0b100110100110
   12 00000000         ;-------------------------------------------------------
                       ----------
   13 00000000         
   14 00000000         ; r0 = recevied 12 bits
   15 00000000         ; r1 = computed 8 bits 
   16 00000000         ; r2 = computed 12 bits
   17 00000000         ; r3 = recevied 4 bits (c0 c1 c2 c3)
   18 00000000         ; r4 = computed 4 bits (c0 c1 c2 c3)
   19 00000000         
   20 00000000         
   21 00000000 E59F016C        LDR              r0, =0xBA7  ; Example test data
                                                            
   22 00000004         
   23 00000004         
   24 00000004         ; 411440521 JoshLee
   25 00000004         ; (Step 1) Received 12 bits -> Received 8 bits
   26 00000004         ; r5 = temp
   27 00000004         ; r1 = computed 8 bits
   28 00000004         ; r0 = recevied 12 bits
   29 00000004 E2005004        AND              r5, r0, #4  ; 0b100
   30 00000008 E1811165        ORR              r1, r1, r5, ROR #2
   31 0000000C E2005070        AND              r5, r0, #112 ; 0b1110000
   32 00000010 E18111E5        ORR              r1, r1, r5, ROR #3
   33 00000014 E2005C0F        AND              r5, r0, #3840 ; 0b111100000000
   34 00000018 E1811265        ORR              r1, r1, r5, ROR #4 ; taken out 
                                                            8 bits data
   35 0000001C         
   36 0000001C         ; Initialize
   37 0000001C E3A05000        MOV              r5, #0
   38 00000020         
   39 00000020         
   40 00000020         ; 411440521 JoshLee
   41 00000020         ; (Step 2) Received 8 bits -> Computed 12 bits (Calculat
                       ed)
   42 00000020         ; r1 = computed 8 bits
   43 00000020         ; r5 = temp
   44 00000020         ; r2 = computed 12 bits
   45 00000020         
   46 00000020         ; claculate c0
   47 00000020 E1A05001        MOV              r5, r1
   48 00000024 E02550E1        EOR              r5, r5, r1, ROR #1 ;d0 EOR d1
   49 00000028 E02551E1        EOR              r5, r5, r1, ROR #3 
                                                            ;d0 EOR d1 EOR d3
   50 0000002C E0255261        EOR              r5, r5, r1, ROR #4 ;d0 EOR d1 E
                                                            OR d3 EOR d4
   51 00000030 E0255361        EOR              r5, r5, r1, ROR #6 ;d0 EOR d1 E
                                                            OR d3 EOR d4 EOR d6



ARM Macro Assembler    Page 2 


                                                            
   52 00000034 E2052001        AND              r2, r5, #1  ;c0 -> r2
   53 00000038         ;*notes* r4 AND #1 only change bit0  
   54 00000038         
   55 00000038         ; claculate c1
   56 00000038 E1A05001        MOV              r5, r1
   57 0000003C E0255161        EOR              r5, r5, r1, ROR #2 ;d0 EOR d2
   58 00000040 E02551E1        EOR              r5, r5, r1, ROR #3 
                                                            ;d0 EOR d2 EOR d3
   59 00000044 E02552E1        EOR              r5, r5, r1, ROR #5 ;d0 EOR d2 E
                                                            OR d3 EOR d5
   60 00000048 E0255361        EOR              r5, r5, r1, ROR #6 ;d0 EOR d2 E
                                                            OR d3 EOR d5 EOR d6
                                                            
   61 0000004C E2055001        AND              r5, r5, #1  ;save bit0 (c1)
   62 00000050 E1822085        ORR              r2, r2, r5, LSL #1
   63 00000054         
   64 00000054         
   65 00000054         ; calculate c2
   66 00000054 E1A050E1        ROR              r5, r1, #1  ;bit0 = d1
   67 00000058 E0255161        EOR              r5, r5, r1, ROR #2 ;d1 EOR d2
   68 0000005C E02551E1        EOR              r5, r5, r1, ROR #3 
                                                            ;d1 EOR d2 EOR d3
   69 00000060 E02553E1        EOR              r5, r5, r1, ROR #7 ;d1 EOR d2 E
                                                            OR d3 EOR d7
   70 00000064 E2055001        AND              r5, r5, #1  ;save bit0 (c2)
   71 00000068 E1822185        ORR              r2, r2, r5, LSL #3
   72 0000006C         
   73 0000006C         
   74 0000006C         ; calculate c3
   75 0000006C E1A05261        ROR              r5, r1, #4
   76 00000070 E02552E1        EOR              r5, r5, r1, ROR #5 ;d4 EOR d5
   77 00000074 E0255361        EOR              r5, r5, r1, ROR #6 
                                                            ;d4 EOR d5 EOR d6
   78 00000078 E02553E1        EOR              r5, r5, r1, ROR #7 ;d4 EOR d5 E
                                                            OR d6 EOR d7
   79 0000007C E2055001        AND              r5, r5, #1  ;save bit0 (c3)
   80 00000080         
   81 00000080         ; Final
   82 00000080 E1822CE5        ORR              r2, r2, r5, ROR #25 ;bit7 = r3
   83 00000084 E2015001        AND              r5, r1, #1  ;Find d0
   84 00000088 E1822105        ORR              r2, r2, r5, LSL #2 ;Add d0
   85 0000008C E3C150F1        BIC              r5, r1, #0xF1 ;Find d1,d2,d3
   86 00000090 E1822185        ORR              r2, r2, r5, LSL #3 
                                                            ;Add d1,d2,d3
   87 00000094 E3C1500F        BIC              r5, r1, #0x0F ;Find d4,d5,d6,d7
                                                            
   88 00000098 E1822205        ORR              r2, r2, r5, LSL #4 
                                                            ;Add d4,d5,d6,d7
   89 0000009C         ; 411440521 JoshLee
   90 0000009C         ; Initialize
   91 0000009C E3A05000        LDR              r5, = 0
   92 000000A0         
   93 000000A0         
   94 000000A0         ; 411440521 JoshLee 
   95 000000A0         ; (Step 3) Hamming 12 bits -> Checksum 4 bits (C0 C1 C2 
                       C3)
   96 000000A0         ;  r0 = recevied 12 bits 
   97 000000A0         ;  r2 = computed 12 bits



ARM Macro Assembler    Page 3 


   98 000000A0         ;  r3 = recevied 4 bits
   99 000000A0         ;  r4 = computed 4 bits
  100 000000A0         ;  r5 = temp 
  101 000000A0         
  102 000000A0         ; recevied 12 bits -> recevied 4 bits
  103 000000A0 E2005001        AND              r5, r0, #1  ;0b1 = 1 (c0)
  104 000000A4 E1833005        ORR              r3, r3, r5  ;12 bits(bit0) -> r
                                                            5(bit0)
  105 000000A8 E2005002        AND              r5, r0, #2  ;0b10 = 2 (c1)
  106 000000AC E1833005        ORR              r3, r3, r5  ;12 bits(bit1) -> r
                                                            5(bit1)
  107 000000B0 E2005008        AND              r5, r0, #8  ;0b1000 = 8 (c2)
  108 000000B4 E18330E5        ORR              r3, r3, r5, ROR #1 ;12 bits(bit
                                                            3) -> r5(bit2)
  109 000000B8 E2005080        AND              r5, r0, #0x80 ;0b10000000 = 0x8
                                                            0 (c3)
  110 000000BC E1833265        ORR              r3, r3, r5, ROR #4 ;12 bits(bit
                                                            7) -> r5(bit3)
  111 000000C0         ; r3 recevied checksum (4 bits)
  112 000000C0         
  113 000000C0         ; computed 12 bits -> computed 4 bits
  114 000000C0 E2025001        AND              r5, r2, #1  ;0b1 = 1 (c0)
  115 000000C4 E1844005        ORR              r4, r4, r5  ;12 bits(bit0) -> r
                                                            5(bit0)
  116 000000C8 E2025002        AND              r5, r2, #2  ;0b10 = 2 (c1)
  117 000000CC E1844005        ORR              r4, r4, r5  ;12 bits(bit1) -> r
                                                            5(bit1)
  118 000000D0 E2025008        AND              r5, r2, #8  ;0b1000 = 8 (c2)
  119 000000D4 E18440E5        ORR              r4, r4, r5, ROR #1 ;12 bits(bit
                                                            3) -> r5(bit2)
  120 000000D8 E2025080        AND              r5, r2, #0x80 ;0b10000000 = 0x8
                                                            0 (c3)
  121 000000DC E1844265        ORR              r4, r4, r5, ROR #4 ;12 bits(bit
                                                            7) -> r5(bit3)
  122 000000E0         ; r4 computed checksum (4 bits)
  123 000000E0         
  124 000000E0         ; Initialize
  125 000000E0 E3A05000        LDR              r5, =0
  126 000000E4         
  127 000000E4         ; 411440521 JoshLee
  128 000000E4         ; (Step 4) Correct the 8 bits
  129 000000E4         ;  r0 = recevied 12 bits
  130 000000E4         ;  r1 = computed 8 bits
  131 000000E4         ;  r2 = computed 12 bits
  132 000000E4         ;  r3 = recevied 4 bits
  133 000000E4         ;  r4 = computed 4 bits
  134 000000E4         ;  r10 = correct 12 bits
  135 000000E4         ;  r6 = correct 8 bits
  136 000000E4         ;  r5, r7, r8 = temp
  137 000000E4         
  138 000000E4 E0235004        EOR              r5, r3, r4
  139 000000E8 E3A06001        LDR              r6, =1
  140 000000EC E3A07000        LDR              r7, =0
  141 000000F0 E3A08004        LDR              r8, =4
  142 000000F4         
  143 000000F4         ; count worong bits
  144 000000F4         count_wrongs
  145 000000F4 E1150006        TST              r5, r6
  146 000000F8 12877001        ADDNE            r7, #1



ARM Macro Assembler    Page 4 


  147 000000FC E1A06086        LSL              r6, #1
  148 00000100 E2488001        SUB              r8, #1
  149 00000104 E3580000        CMP              r8, #0
  150 00000108 CAFFFFF9        BGT              count_wrongs
  151 0000010C         ; r7 = how many error bits
  152 0000010C         
  153 0000010C         ; Clear temp
  154 0000010C E3A05000        LDR              r5, =0
  155 00000110 E3A06000        LDR              r6, =0
  156 00000114 E3A08000        LDR              r8, =0
  157 00000118         
  158 00000118         ; Correct 8 bits based on the number of errors (wrong bi
                       ts)
  159 00000118 E3570001        CMP              r7, #1
  160 0000011C 0A000002        BEQ              one_wrong
  161 00000120 13570002        CMPNE            r7, #2
  162 00000124 0A000002        BEQ              two_wrongs
  163 00000128 1A00000D        BNE              done
  164 0000012C         
  165 0000012C         ; 411440521 JoshLee
  166 0000012C         ; one wrong number
  167 0000012C         one_wrong
  168 0000012C E1A06001        MOV              r6, r1
  169 00000130 EA00000B        B                done
  170 00000134         
  171 00000134         ; 411440521 JoshLee
  172 00000134         ; two wrong number
  173 00000134         two_wrongs
  174 00000134 E3A08001        LDR              r8, =1
  175 00000138 E3570002        CMP              r7, #2
  176 0000013C 1A000008        BNE              done
  177 00000140         
  178 00000140 E0235004        EOR              r5, r3, r4  ; 2^n + 2^m
  179 00000144 E2455001        SUB              r5, #1      ; 2^n + 2^m - 1 (wr
                                                            ong bit index)
  180 00000148 E020A518        EOR              r10, r0, r8, LSL r5 
                                                            ; wrong bit index
  181 0000014C         
  182 0000014C E20A5004        AND              r5, r10, #4 ; Binary: 0b100 (d0
                                                            )
  183 00000150 E1866165        ORR              r6, r6, r5, ROR #2
  184 00000154 E20A5070        AND              r5, r10, #112 ; Binary: 0b11100
                                                            00 (d3 d2 d1)
  185 00000158 E18661E5        ORR              r6, r6, r5, ROR #3
  186 0000015C E20A5C0F        AND              r5, r10, #3840 ; Binary: 0b1111
                                                            00000000 (d7 d6 d5 
                                                            d4)
  187 00000160 E1866265        ORR              r6, r6, r5, ROR #4
  188 00000164         
  189 00000164         done
  190 00000164         ; Clear temp
  191 00000164 E3A05000        LDR              r5, =0
  192 00000168 E3A07000        LDR              r7, =0
  193 0000016C E3A08000        LDR              r8, =0
  194 00000170         
  195 00000170         
  196 00000170 EAFFFFFE 
                       stop    B                stop
  197 00000174                 END



ARM Macro Assembler    Page 5 


              00000BA7 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\prog1.d -o.\objects\prog1.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__UVISION_VERSION SETA 528" --list=.\listings\prog1.lst prog1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HW4 00000000

Symbol: HW4
   Definitions
      At line 1 in file prog1.s
   Uses
      None
Comment: HW4 unused
count_wrongs 000000F4

Symbol: count_wrongs
   Definitions
      At line 144 in file prog1.s
   Uses
      At line 150 in file prog1.s
Comment: count_wrongs used once
done 00000164

Symbol: done
   Definitions
      At line 189 in file prog1.s
   Uses
      At line 163 in file prog1.s
      At line 169 in file prog1.s
      At line 176 in file prog1.s

one_wrong 0000012C

Symbol: one_wrong
   Definitions
      At line 167 in file prog1.s
   Uses
      At line 160 in file prog1.s
Comment: one_wrong used once
stop 00000170

Symbol: stop
   Definitions
      At line 196 in file prog1.s
   Uses
      At line 196 in file prog1.s
Comment: stop used once
two_wrongs 00000134

Symbol: two_wrongs
   Definitions
      At line 173 in file prog1.s
   Uses
      At line 162 in file prog1.s
Comment: two_wrongs used once
6 symbols
340 symbols in table
