


ARM Macro Assembler    Page 1 


    1 00000000         ; Program 4
    2 00000000                 AREA             FinalExam_Pretest_4, CODE, READ
ONLY
    3 00000000                 ENTRY
    4 00000000         
    5 00000000 E3A00101        LDR              r0, =0x40000000
    6 00000004 E59FD154        LDR              sp, =0x40000020
    7 00000008 E59F1154        LDR              r1, =0x8765ABCD
    8 0000000C E59F2154        LDR              r2, =0xCDEF6543
    9 00000010 E59F3154        LDR              r3, =0xFACEBEEF
   10 00000014 E59F4154        LDR              r4, =0x87654321
   11 00000018         
   12 00000018 E880001E        STMIA            r0, {r1, r2, r3, r4} ; low to h
                                                            igh => 0x40000000 t
                                                            o 0x40000011 => r1 
                                                            to r4
   13 0000001C EB000005        BL               sub1
   14 00000020         
   15 00000020 EB000002        BL               reset_data
   16 00000024 E81D001E        LDMDA            sp, {r1, r2, r3, r4} ; low to h
                                                            igh => 0x40000000 t
                                                            o 0x40000011 => r1 
                                                            to r4
   17 00000028 EB000027        BL               sub2
   18 0000002C         
   19 0000002C EAFFFFFE 
                       stop    B                stop
   20 00000030         
   21 00000030         reset_data
   22 00000030 E9AD001E        STMIB            sp!, {r1, r2, r3, r4} ; low to 
                                                            high => 0x40000028 
                                                            to 0x40000039 => r1
                                                             to r4
   23 00000034 E12FFF1E        BX               lr
   24 00000038         
   25 00000038         sub1
   26 00000038         ; r5 = mask / result
   27 00000038         ; r6 = 0x40000000
   28 00000038         ; r7 = 0x40000008
   29 00000038         ; r8 = total number of 1 in bit 3, 4, 5, 9 and 11
   30 00000038         ; r9 = clear bit8
   31 00000038         
   32 00000038 E3A05001        MOV              r5, #1
   33 0000003C E5906000        LDR              r6, [r0]
   34 00000040 E5907008        LDR              r7, [r0, #8]
   35 00000044         
   36 00000044 E3A05001        MOV              r5, #1
   37 00000048 E00551E6        AND              r5, r5, r6, ROR #3
   38 0000004C E3150001        TST              r5, #1
   39 00000050 12888001        ADDNE            r8, #1
   40 00000054         
   41 00000054 E3A05001        MOV              r5, #1
   42 00000058 E0055266        AND              r5, r5, r6, ROR #4
   43 0000005C E3150001        TST              r5, #1
   44 00000060 12888001        ADDNE            r8, #1
   45 00000064         
   46 00000064 E3A05001        MOV              r5, #1
   47 00000068 E00552E6        AND              r5, r5, r6, ROR #5
   48 0000006C E3150001        TST              r5, #1



ARM Macro Assembler    Page 2 


   49 00000070 12888001        ADDNE            r8, #1
   50 00000074         
   51 00000074 E3A05001        MOV              r5, #1
   52 00000078 E00554E6        AND              r5, r5, r6, ROR #9
   53 0000007C E3150001        TST              r5, #1
   54 00000080 12888001        ADDNE            r8, #1
   55 00000084         
   56 00000084 E3A05001        MOV              r5, #1
   57 00000088 E00555E6        AND              r5, r5, r6, ROR #11
   58 0000008C E3150001        TST              r5, #1
   59 00000090 12888001        ADDNE            r8, #1
   60 00000094         
   61 00000094         
   62 00000094 E2088001        AND              r8, #1      ; check total is od
                                                            d / even
   63 00000098 E3580000        CMP              r8, #0      ; if even
   64 0000009C 0A000001        BEQ              is_even_sub1
   65 000000A0 E3580001        CMP              r8, #1      ; if odd
   66 000000A4 0A000001        BEQ              is_odd_sub1
   67 000000A8         
   68 000000A8         is_even_sub1
   69 000000A8 E3A08001        MOV              r8, #1
   70 000000AC EA000001        B                exit_sub1
   71 000000B0         
   72 000000B0         is_odd_sub1
   73 000000B0 E3A08000        MOV              r8, #0
   74 000000B4 EAFFFFFF        B                exit_sub1
   75 000000B8         
   76 000000B8         exit_sub1
   77 000000B8 E3A09C01        LDR              r9, =0x100
   78 000000BC E1C77009        BIC              r7, r7, r9
   79 000000C0 E1877408        ORR              r7, r7, r8, LSL #8
   80 000000C4 E5807008        STR              r7, [r0, #8]
   81 000000C8 E12FFF1E        BX               lr
   82 000000CC         
   83 000000CC         
   84 000000CC         sub2
   85 000000CC         ; r1 = 0x40000000
   86 000000CC         ; r2 = 0x40000008
   87 000000CC         ; r3 = total number of 1 in bit 6, 9, 13, 16 and 19
   88 000000CC         ; r4 = clear bits
   89 000000CC         ; r5 = bits 
   90 000000CC         
   91 000000CC E3A01000        LDR              r1, =0
   92 000000D0 E3A02000        LDR              r2, =0
   93 000000D4 E3A03000        LDR              r3, =0
   94 000000D8 E3A04000        LDR              r4, =0
   95 000000DC E3A05000        LDR              r5, =0
   96 000000E0         
   97 000000E0 E3A05001        MOV              r5, #1
   98 000000E4 E5901000        LDR              r1, [r0]
   99 000000E8 E5902008        LDR              r2, [r0, #8]
  100 000000EC         
  101 000000EC E3A05001        MOV              r5, #1
  102 000000F0 E0055361        AND              r5, r5, r1, ROR #6
  103 000000F4 E0833005        ADD              r3, r3, r5
  104 000000F8         
  105 000000F8 E3A05001        MOV              r5, #1
  106 000000FC E00554E1        AND              r5, r5, r1, ROR #9



ARM Macro Assembler    Page 3 


  107 00000100 E0833005        ADD              r3, r3, r5
  108 00000104         
  109 00000104 E3A05001        MOV              r5, #1
  110 00000108 E00556E1        AND              r5, r5, r1, ROR #13
  111 0000010C E0833005        ADD              r3, r3, r5
  112 00000110         
  113 00000110 E3A05001        MOV              r5, #1
  114 00000114 E0055861        AND              r5, r5, r1, ROR #16
  115 00000118 E0833005        ADD              r3, r3, r5
  116 0000011C         
  117 0000011C E3A05001        MOV              r5, #1
  118 00000120 E00559E1        AND              r5, r5, r1, ROR #19
  119 00000124 E0833005        ADD              r3, r3, r5
  120 00000128         
  121 00000128 E2033001        AND              r3, #1
  122 0000012C E3530000        CMP              r3, #0
  123 00000130 0A000001        BEQ              is_even_sub2
  124 00000134 E3530001        CMP              r3, #1
  125 00000138 0A000001        BEQ              is_odd_sub2
  126 0000013C         
  127 0000013C         is_even_sub2
  128 0000013C E3A03001        MOV              r3, #1
  129 00000140 EA000001        B                exit_sub2
  130 00000144         
  131 00000144         is_odd_sub2
  132 00000144 E3A03000        MOV              r3, #0
  133 00000148 EAFFFFFF        B                exit_sub2
  134 0000014C         
  135 0000014C         exit_sub2
  136 0000014C E3A04601        LDR              r4, =0x100000
  137 00000150 E1C22004        BIC              r2, r2, r4
  138 00000154 E1822A03        ORR              r2, r2, r3, LSL #20
  139 00000158 E5802008        STR              r2, [r0, #8]
  140 0000015C E12FFF1E        BX               lr
  141 00000160         
  142 00000160                 END
              40000020 
              8765ABCD 
              CDEF6543 
              FACEBEEF 
              87654321 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\prog4.d -o.\objects\prog4.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__UVISION_VERSION SETA 528" --list=.\listings\prog4.lst prog4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FinalExam_Pretest_4 00000000

Symbol: FinalExam_Pretest_4
   Definitions
      At line 2 in file prog4.s
   Uses
      None
Comment: FinalExam_Pretest_4 unused
exit_sub1 000000B8

Symbol: exit_sub1
   Definitions
      At line 76 in file prog4.s
   Uses
      At line 70 in file prog4.s
      At line 74 in file prog4.s

exit_sub2 0000014C

Symbol: exit_sub2
   Definitions
      At line 135 in file prog4.s
   Uses
      At line 129 in file prog4.s
      At line 133 in file prog4.s

is_even_sub1 000000A8

Symbol: is_even_sub1
   Definitions
      At line 68 in file prog4.s
   Uses
      At line 64 in file prog4.s
Comment: is_even_sub1 used once
is_even_sub2 0000013C

Symbol: is_even_sub2
   Definitions
      At line 127 in file prog4.s
   Uses
      At line 123 in file prog4.s
Comment: is_even_sub2 used once
is_odd_sub1 000000B0

Symbol: is_odd_sub1
   Definitions
      At line 72 in file prog4.s
   Uses
      At line 66 in file prog4.s
Comment: is_odd_sub1 used once
is_odd_sub2 00000144

Symbol: is_odd_sub2
   Definitions
      At line 131 in file prog4.s
   Uses
      At line 125 in file prog4.s
Comment: is_odd_sub2 used once
reset_data 00000030



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: reset_data
   Definitions
      At line 21 in file prog4.s
   Uses
      At line 15 in file prog4.s
Comment: reset_data used once
stop 0000002C

Symbol: stop
   Definitions
      At line 19 in file prog4.s
   Uses
      At line 19 in file prog4.s
Comment: stop used once
sub1 00000038

Symbol: sub1
   Definitions
      At line 25 in file prog4.s
   Uses
      At line 13 in file prog4.s
Comment: sub1 used once
sub2 000000CC

Symbol: sub2
   Definitions
      At line 84 in file prog4.s
   Uses
      At line 17 in file prog4.s
Comment: sub2 used once
11 symbols
345 symbols in table
