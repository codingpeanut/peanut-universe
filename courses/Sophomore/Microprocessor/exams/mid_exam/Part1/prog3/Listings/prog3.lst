


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             UARTDEMO, CODE, READONLY
    2 00000000 E002C000 
                       PINSEL0 EQU              0XE002C000  ; controls the func
                                                            tion of the pins
    3 00000000 E000C000 
                       U0START EQU              0XE000C000  ; start of UART0 re
                                                            gister
    4 00000000 0000000C 
                       LCR0    EQU              0XC         ; line control regi
                                                            ster for UART0
    5 00000000 00000014 
                       LSR0    EQU              0X14        ; line status regis
                                                            ter for UART0
    6 00000000 40000000 
                       RAMSTART
                               EQU              0X40000000  ; start of onboard 
                                                            RAM for 2104
    7 00000000         ; 411440521 JoshLee
    8 00000000                 ENTRY
    9 00000000         start
   10 00000000 E59FD100        LDR              sp, =RAMSTART ; set up stack po
                                                            inter
   11 00000004 EB000018        BL               UARTConfig  ; initialize/config
                                                            ure UART0
   12 00000008         
   13 00000008         ; 3(a)  to copy the string (variable StudentData) revers
                       ely to memory starting from address 0x40000070
   14 00000008         ; ------------------------- store student data reversely
                        -------------------------
   15 00000008 E59F30FC        LDR              r3, =0x40000070
   16 0000000C E59F10FC        LDR              r1, =StudentData ; starting add
                                                            ress of StudentData
                                                            
   17 00000010 E2811029        ADD              r1, #41     ; rev_head_address(
                                                            r1) = StudentData(r
                                                            1) + string_length(
                                                            #43)
   18 00000014 E3A0202A        MOV              r2, #42     ; length_counter = 
                                                            string_length + 1
   19 00000018 E3A04000        MOV              r4, #0      ; to clear next byt
                                                            e
   20 0000001C         Loop1_STR_Rev
   21 0000001C E4515001        LDRB             r5, [r1], #-1 ; load character,
                                                             decrement address
   22 00000020 E4C35001        STRB             r5, [r3], #1 ; store character,
                                                             increment address
   23 00000024 E2422001        SUB              r2, #1      ; length_counter co
                                                            unter--
   24 00000028 E3520000        CMP              r2, #0      ; length_counter gr
                                                            eater than 0?
   25 0000002C E5C34000        STRB             r4, [r3]    ; clear next byte
   26 00000030 1AFFFFF9        BNE              Loop1_STR_Rev ; continue if len
                                                            gth_counter not equ
                                                            als to 0
   27 00000034         ; ------------------------- store student data reversely
                        -------------------------
   28 00000034         
   29 00000034         ; 411440521 JoshLee
   30 00000034         ; 3(b)  to use calls to subroutine Transmit to display a



ARM Macro Assembler    Page 2 


                        sequence of 10 characters at memory address 0x40000078 
                       in the UART #1 window after program execution by using F
                       5 (Run)
   31 00000034         ; ----------------------------- display 10 characters --
                       --------------------------
   32 00000034 E59F10D8        LDR              r1, =0x40000078
   33 00000038 E3A0200A        MOV              r2, #10     ; length_counter
   34 0000003C         Loop2_Tx_x_char
   35 0000003C E4D10001        LDRB             r0, [r1], #1 ; load character, 
                                                            decrement address
   36 00000040 E3520000        CMP              r2, #0      ; length_counter gr
                                                            eater than 0?
   37 00000044 1B000016        BLNE             Transmit    ; send character to
                                                             UART
   38 00000048 E2422001        SUB              r2, #1      ; length_counter co
                                                            unter--
   39 0000004C 1AFFFFFA        BNE              Loop2_Tx_x_char ; continue if l
                                                            ength_counter not e
                                                            quals to 0
   40 00000050         ; ----------------------------- display 10 characters --
                       --------------------------
   41 00000050         
   42 00000050         ; 411440521 JoshLee
   43 00000050         ; 3(c)  to use calls to subroutine Receive to receive a 
                       sequence of error-free 20 characters from the UART0 and 
                       put them in memory starting from address 0x400000A0. (Sh
                       ow execution results by using F10 (Step over) and F11 (S
                       tep).)
   44 00000050         ; ----------------------------- receive 20 characters --
                       --------------------------
   45 00000050 E3A09014        MOV              r9, #20
   46 00000054 E59F10BC        LDR              r1, =0x400000A0
   47 00000058         Loop3_Rx_xx_char
   48 00000058 EB000018        BL               Receive
   49 0000005C E4C01001        STRB             r1, [r0], #1
   50 00000060 E2599001        SUBS             r9, r9, #1
   51 00000064 1AFFFFFB        BNE              Loop3_Rx_xx_char
   52 00000068         ; ----------------------------- receive 20 characters --
                       --------------------------
   53 00000068         
   54 00000068 EAFFFFFE 
                       done    B                done        ; otherwise we're d
                                                            one
   55 0000006C         
   56 0000006C         ; Subroutine UARTConfig
   57 0000006C         ; This subroutine configures the I/O pins first. It
   58 0000006C         ; then sets up the UART control register. The
   59 0000006C         ; parameters
   60 0000006C         ; are set to 8 bits, no parity and 1 stop bit.
   61 0000006C         ; Registers used:
   62 0000006C         ; r5   scratch register
   63 0000006C         ; r6   scratch register
   64 0000006C         ; inputs: none
   65 0000006C         ; outputs: none
   66 0000006C         
   67 0000006C         UARTConfig
   68 0000006C E8AD4060        STMIA            sp!, {r5, r6, lr}
   69 00000070 E59F50A4        LDR              r5, =PINSEL0 ; base address of 
                                                            register



ARM Macro Assembler    Page 3 


   70 00000074 E5956000        LDR              r6, [r5]    ; get contents
   71 00000078 E3C6600F        BIC              r6, r6, #0xF ; clear out lower 
                                                            nibble
   72 0000007C E3866005        ORR              r6, r6, #0x5 ; sets P0.0 to Tx0
                                                             and P0.1 to Rx0
   73 00000080 E5856000        STR              r6, [r5]    ; r/modify/w back t
                                                            o register
   74 00000084 E59F5094        LDR              r5, =U0START
   75 00000088 E3A06083        MOV              r6, #0x83   ; set 8 bits, no pa
                                                            rity, 1 stop bit
   76 0000008C E5C5600C        STRB             r6, [r5, #LCR0] ; write control
                                                             byte to LCR
   77 00000090 E3A06061        MOV              r6, #0x61   ; 9600 baud @15 MHz
                                                             VPB clock
   78 00000094 E5C56000        STRB             r6, [r5]    ; store control byt
                                                            e
   79 00000098 E3A06003        MOV              r6, #3      ; set DLAB = 0
   80 0000009C E5C5600C        STRB             r6, [r5, #LCR0] ; Tx and Rx buf
                                                            fers set up
   81 000000A0 E93D8060        LDMDB            sp!, {r5, r6, pc}
   82 000000A4         
   83 000000A4         
   84 000000A4         ; Subroutine Transmit
   85 000000A4         ; This routine puts one byte into the UART
   86 000000A4         ; for transmitting.
   87 000000A4         ; Register used:
   88 000000A4         ; r5 - scratch
   89 000000A4         ; r6 - scratch
   90 000000A4         ; inputs: r0- byte to transmit
   91 000000A4         ; outputs: none
   92 000000A4         ;
   93 000000A4         
   94 000000A4         Transmit
   95 000000A4 E8AD4060        STMIA            sp!, {r5, r6, lr}
   96 000000A8 E59F5070        LDR              r5, =U0START
   97 000000AC         wait_Tx
   98 000000AC E5D56014        LDRB             r6, [r5, #LSR0] ; get status of
                                                             buffer
   99 000000B0 E3160020        TST              r6, #0x20   ; buffer empty?
  100 000000B4 0AFFFFFC        BEQ              wait_Tx     ; spin until buffer
                                                             empty
  101 000000B8 E5C50000        STRB             r0, [r5]
  102 000000BC E93D8060        LDMDB            sp!, {r5, r6, pc}
  103 000000C0         
  104 000000C0         Receive
  105 000000C0 E8AD4060        STMIA            sp!, {r5, r6, lr}
  106 000000C4 E59F5054        LDR              r5, =U0START
  107 000000C8         wait_Rx
  108 000000C8 E5D56014        LDRB             r6, [r5, #LSR0] ; get status of
                                                             buffer
  109 000000CC E3160001        TST              r6, #1      ; data ready?
  110 000000D0 0AFFFFFC        BEQ              wait_Rx     ; until data ready
  111 000000D4 E5D50000        LDRB             r0, [r5]
  112 000000D8 E93D8060        LDMDB            sp!, {r5, r6, pc}
  113 000000DC         
  114 000000DC         StudentData
  115 000000DC         ;        0                    21   26 29     36   41
  116 000000DC 34 31 31 
              34 34 30 



ARM Macro Assembler    Page 4 


              35 32 31 
              2D 4C 65 
              65 2D 4D 
              69 64 74 
              65 72 6D 
              20 45 78 
              61 6D 20 
              69 6E 20 
              53 70 72 
              69 6E 67 
              20 32 30 
              32 34 21 
              00               DCB              "411440521-Lee-Midterm Exam in 
Spring 2024!", 0 
                                                            ; string_length = 4
                                                            2 (index: 0~41)
  117 00000107                 END
              00 40000000 
              40000070 
              00000000 
              40000078 
              400000A0 
              E002C000 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\prog3.d -o.\objects\prog3.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__UVISION_VERSION SETA 528" --list=.\listings\prog3.lst prog3.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Loop1_STR_Rev 0000001C

Symbol: Loop1_STR_Rev
   Definitions
      At line 20 in file prog3.s
   Uses
      At line 26 in file prog3.s
Comment: Loop1_STR_Rev used once
Loop2_Tx_x_char 0000003C

Symbol: Loop2_Tx_x_char
   Definitions
      At line 34 in file prog3.s
   Uses
      At line 39 in file prog3.s
Comment: Loop2_Tx_x_char used once
Loop3_Rx_xx_char 00000058

Symbol: Loop3_Rx_xx_char
   Definitions
      At line 47 in file prog3.s
   Uses
      At line 51 in file prog3.s
Comment: Loop3_Rx_xx_char used once
Receive 000000C0

Symbol: Receive
   Definitions
      At line 104 in file prog3.s
   Uses
      At line 48 in file prog3.s
Comment: Receive used once
StudentData 000000DC

Symbol: StudentData
   Definitions
      At line 114 in file prog3.s
   Uses
      At line 16 in file prog3.s
Comment: StudentData used once
Transmit 000000A4

Symbol: Transmit
   Definitions
      At line 94 in file prog3.s
   Uses
      At line 37 in file prog3.s
Comment: Transmit used once
UARTConfig 0000006C

Symbol: UARTConfig
   Definitions
      At line 67 in file prog3.s
   Uses
      At line 11 in file prog3.s
Comment: UARTConfig used once
UARTDEMO 00000000

Symbol: UARTDEMO



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 1 in file prog3.s
   Uses
      None
Comment: UARTDEMO unused
done 00000068

Symbol: done
   Definitions
      At line 54 in file prog3.s
   Uses
      At line 54 in file prog3.s
Comment: done used once
start 00000000

Symbol: start
   Definitions
      At line 9 in file prog3.s
   Uses
      None
Comment: start unused
wait_Rx 000000C8

Symbol: wait_Rx
   Definitions
      At line 107 in file prog3.s
   Uses
      At line 110 in file prog3.s
Comment: wait_Rx used once
wait_Tx 000000AC

Symbol: wait_Tx
   Definitions
      At line 97 in file prog3.s
   Uses
      At line 100 in file prog3.s
Comment: wait_Tx used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

LCR0 0000000C

Symbol: LCR0
   Definitions
      At line 4 in file prog3.s
   Uses
      At line 76 in file prog3.s
      At line 80 in file prog3.s

LSR0 00000014

Symbol: LSR0
   Definitions
      At line 5 in file prog3.s
   Uses
      At line 98 in file prog3.s
      At line 108 in file prog3.s

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 2 in file prog3.s
   Uses
      At line 69 in file prog3.s
Comment: PINSEL0 used once
RAMSTART 40000000

Symbol: RAMSTART
   Definitions
      At line 6 in file prog3.s
   Uses
      At line 10 in file prog3.s
Comment: RAMSTART used once
U0START E000C000

Symbol: U0START
   Definitions
      At line 3 in file prog3.s
   Uses
      At line 74 in file prog3.s
      At line 96 in file prog3.s
      At line 106 in file prog3.s

5 symbols
351 symbols in table
